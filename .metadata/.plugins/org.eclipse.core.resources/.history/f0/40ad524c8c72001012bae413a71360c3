package royanmobiletesting;

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.time.Duration;

import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;

import io.appium.java_client.ios.IOSDriver;
import io.appium.java_client.ios.options.XCUITestOptions;
import io.appium.java_client.service.local.AppiumDriverLocalService;
import io.appium.java_client.service.local.AppiumServiceBuilder;

public class BaseTest {
	
   public IOSDriver driver;
   public AppiumDriverLocalService service;
   
   @SuppressWarnings("deprecation")
@BeforeClass
   public void ConfigureAppium() throws MalformedURLException {
	
	               // ✅ Start Appium service programmatically
	               service = new AppiumServiceBuilder()
	                       .withAppiumJS(new File("/Users/anuragroy/.appium/node_modules/appium/build/lib/main.js"))
	                       .withIPAddress("127.0.0.1")
	                       .usingPort(4723)
	                       .build();
	               service.start();

	               // ✅ Set capabilities using XCUITestOptions
	               XCUITestOptions options = new XCUITestOptions();
	               options.setDeviceName("iPhone 16 Pro");
	               options.setPlatformName("iOS");
	               options.setPlatformVersion("18.5");
	               options.setApp("/Users/anuragroy/Desktop/UIKitCatalog.app");
	               options.setWdaLaunchTimeout(Duration.ofSeconds(60));
	               options.setShowXcodeLog(true); // ✅ Recommended for debugging
	               options.setUseNewWDA(false);   // ✅ Avoids rebuilding WDA every time

	               // Optional - useful for real device
	               // options.setUdid("your-device-udid");
	               // options.setXcodeOrgId("your-team-id");
	               // options.setXcodeSigningId("iPhone Developer");

	               driver = new IOSDriver(new URL("http://127.0.0.1:4723"), options);
	               driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(40));
	   
   }
   
   @AfterClass
   public void TearDown() {
	  driver.quit();
	  service.stop();
   }
   
 }
